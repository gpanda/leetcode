package leetcode.p0072;

import java.util.*;
import java.util.stream.*;

public class S1 implements Solution {
    // TLE

    public int minDistance(String word1, String word2) {
        if (word1.length() == 0) {
            return word2.length();
        }
        if (word2.length() == 0) {
            return word1.length();
        }
        List<Integer> idx1 = new ArrayList<>(word1.length());
        List<Integer> idx2 = new ArrayList<>(word2.length());
        List<Integer> idx1_max = new ArrayList<>(word1.length());
        List<Integer> idx2_max = new ArrayList<>(word2.length());
        int overlap = dfs(0, 0, word1.length(), word2.length(), word1, word2,
            idx1, idx2, 0, idx1_max, idx2_max);
        int i = 0;
        int distance = 0;
        if (idx1_max.size() > 0) {
            distance += Math.max(idx1_max.get(0), idx2_max.get(0));
            i = 1;
        }
        while (i < idx1_max.size()) {
            distance += Math.max(idx1_max.get(i) - idx1_max.get(i-1),
                                 idx2_max.get(i) - idx2_max.get(i-1)) - 1;
            i++;
        }
        i--;
        if (idx1_max.size() > 0) {
            distance += Math.max(word1.length() - idx1_max.get(i),
                                 word2.length() - idx2_max.get(i)) - 1;
        }
        return distance;
    }

    private int dfs(
        int s1, int s2, int end1, int end2, String w1, String w2,
        List<Integer> idx1, List<Integer> idx2, int overlap,
        List<Integer> idx1_max, List<Integer> idx2_max) {
        if (s1 == end1 || s2 == end2) {
            if (idx1.size() > overlap) {
                overlap = idx1.size();
                idx1_max.clear();
                idx1_max.addAll(idx1);
                idx2_max.clear();
                idx2_max.addAll(idx2);
                return overlap;
            }
        }
        for (int i = s1; i < end1; i++) {
                int size1 = idx1.size();
                int size2 = idx2.size();
            for (int j = s2; j < end2; j++) {
                if (w1.charAt(i) == w2.charAt(j)) {
                    idx1.add(i);
                    idx2.add(j);
                }
                overlap = dfs(i+1, j+1, end1, end2, w1, w2,
                   idx1, idx2, overlap, idx1_max, idx2_max);
                idx1.subList(size1, idx1.size()).clear();
                idx2.subList(size2, idx2.size()).clear();
            }
        }
        return overlap;
    }
}

