package leetcode.p0079;

import java.util.*;
import java.util.stream.*;

public class S1 implements Solution {
    public boolean exist(char[][] board, String word) {
        if (word == null || word.length() == 0) {
            return true;
        }
        if (board == null || board.length == 0) {
            return false;
        }
        boolean[][] flags = new boolean[board.length][board[0].length];
        spread(board, word, 0, 0, flags);
        int p = 0;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == word.charAt(p)) {
                }
            }
        }
        return p == word.length();
    }

    private void spread(char[][] b, String w, int i, int j, boolean[][] flags) {
        if (flags[i][j]) return;
        flags[i][j] = true;
        if (w.indexOf(b[i][j]) < 0) {
            b[i][j] = 0;
        }
        boolean connected = false;
        if (isValidXY(b, i-1, j)) {
            spread(b, w, i-1, j, flags);
            if (b[i-1][j] != 0) {
                connected = true;
            }
        }
        if (isValidXY(b, i+1, j)) {
            spread(b, w, i+1, j, flags);
            if (b[i+1][j] != 0) {
                connected = true;
            }
        }
        if (isValidXY(b, i, j-1)) {
            spread(b, w, i, j-1, flags);
            if (b[i][j-1] != 0) {
                connected = true;
            }
        }
        if (isValidXY(b, i, j+1)) {
            spread(b, w, i, j+1, flags);
            if (b[i][j+1] != 0) {
                connected = true;
            }
        }
        if (!connected) {
            b[i][j] = 0;
        }
    }

    private boolean isValidXY(char[][] b, int i, int j) {
        if (i < 0 || i >= b.length || j < 0 || j >= b[0].length) {
            return false;
        } else {
            return true;
        }
    }
}
